#include <stdio.h>
#include <string.h>
#include <math.h>

#define PI 3.1416
#define MAX_SIZE 100

int operacion;

void transpuestaCalculo(int n, int matriz[MAX_SIZE][MAX_SIZE], int transpuesta[MAX_SIZE][MAX_SIZE]);
void productoMatrices(int n, int j, int k, int matriz1[MAX_SIZE][MAX_SIZE], int matriz2[MAX_SIZE][MAX_SIZE], int productoMatriz[MAX_SIZE][MAX_SIZE]);

int main() {
    printf("Lista de operaciones:\n 1. Calcular el area y perimetro de un poligono regular.\n 2. Producto escalar de dos vectores.\n 3. Devolver transpuesta de una matriz cuadrada.\n 4. Calcular el producto de dos matrices.\n 5. Ingresar un array de enteros y comparar el array ordenado y el ingresado.\n 6. Ingresar un array de enteros y comparar el array ordenado y el ingresado siendo los numeros pares ordenados de forma ascendente y los impares de forma descendente.\n 7. Salir.\nOperacion a realizar: ");

    scanf("%d", &operacion);

    do {
        switch (operacion) {
            case 1: {
                int l, numlad, perimetro;
                float area;

                printf("Ingrese el tama単o del lado: ");
                scanf("%d", &l);

                printf("Ingrese la cantidad de lados: ");
                scanf("%d", &numlad);

                perimetro = numlad * l;
                area = (numlad * l * l) / (4 * tan(PI / numlad));

                printf("El area del poligono es %f, y el perimetro es %d\n", area, perimetro);

                printf("Operacion a realizar: ");
                scanf("%d", &operacion);
                break;
            }

            case 2: {
                int n, a[MAX_SIZE], b[MAX_SIZE], productoEscalar = 0;

                printf("Ingrese el tama単o de los vectores: ");
                scanf("%d", &n);

                for (int i = 0; i < n; i++) {
                    printf("Ingrese los valores del vector a%d: ", i);
                    scanf("%d", &a[i]);

                    printf("Ingrese los valores del vector b%d: ", i);
                    scanf("%d", &b[i]);

                    productoEscalar += a[i] * b[i];
                }

                printf("El producto escalar de a y b es %d\n", productoEscalar);

                printf("Operacion a realizar: ");
                scanf("%d", &operacion);
                break;
            }

            case 3: {
                int n, matriz[MAX_SIZE][MAX_SIZE], transpuesta[MAX_SIZE][MAX_SIZE];

                printf("Ingrese el tama単o de la matriz: ");
                scanf("%d", &n);

                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        printf("Ingrese el valor de la matriz en la posicion %d,%d: ", i, j);
                        scanf("%d", &matriz[i][j]);
                    }
                }

                transpuestaCalculo(n, matriz, transpuesta);

                for (int j = 0; j < n; j++) {
                    for (int i = 0; i < n; i++) {
                        printf("%d ", transpuesta[j][i]);
                    }
                    printf("\n");
                }

                printf("Operacion a realizar: ");
                scanf("%d", &operacion);
                break;
            }

            case 4: {
                int n, j, k, matriz1[MAX_SIZE][MAX_SIZE], matriz2[MAX_SIZE][MAX_SIZE], productoMatriz[MAX_SIZE][MAX_SIZE];

                printf("Ingrese el tama単o de las matrices: ");
                scanf("%d", &n);

                printf("Ingrese los valores de la primera matriz: \n");
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        scanf("%d", &matriz1[i][j]);
                    }
                }

                printf("Ingrese los valores de la segunda matriz:\n");
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        scanf("%d", &matriz2[i][j]);
                    }
                }

                productoMatrices(n, j, k, matriz1, matriz2, productoMatriz);

                printf("El producto de las matrices es:\n");
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j < n; j++) {
                        printf("%d ", productoMatriz[i][j]);
                    }
                    printf("\n");
                }

                printf("Operacion a realizar: ");
                scanf("%d", &operacion);
                break;
            }

            default:
                printf("Operacion no valida.\n");
                printf("Operacion a realizar: ");
                scanf("%d", &operacion);
                break;
        }
    } while (operacion != 5);

    return 0;
}

void transpuestaCalculo(int n, int matriz[MAX_SIZE][MAX_SIZE], int transpuesta[MAX_SIZE][MAX_SIZE]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            transpuesta[j][i] = matriz[i][j];
        }
    }
}

void productoMatrices(int n, int j, int k, int matriz1[MAX_SIZE][MAX_SIZE], int matriz2[MAX_SIZE][MAX_SIZE], int productoMatriz[MAX_SIZE][MAX_SIZE]){
	for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
                productoMatriz[i][j] = 0;
                for (int k = 0; k < n; k++) {
                        productoMatriz[i][j] += matriz1[i][k] * matriz2[k][j];
                
            	}
        }
	}
}
